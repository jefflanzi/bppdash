//- D3 API - https://github.com/mbostock/d3/wiki/API-Reference
//- D3 Book - http://chimera.labs.oreilly.com/books/1230000000345/index.html
//- http://chimera.labs.oreilly.com/books/1230000000345/ch08.html#_cleaning_it_up
#chart.wrapper
  #tooltip.hidden
    p
      strong Tooltip Heading
    p
      span#value Value Text
script.
  //- Draw SVG
  var w = 1000;
  var h = 600;  
  var svg = d3.select('#chart')
    .append('svg')
    .attr({
      width: w,
      height: h
    });   
    
  //- Define Triangle Line Markers
  var def = svg.append('defs')
  var marker = def.append('marker')
    .attr({
      id: 'triangle',
      viewBox: '0 0 10 10',
      refX: 1,
      refY: 5,
      markerWidth: 6,
      markerHeight: 6,
      orient: 'auto'
    });
  var path = marker.append('path')
    .attr('d', 'M 0 0 L 10 5 L 0 10 z');
    
  //- Load data and draw chart
  d3.json('/data/factorMap.json', function(factorData) {
          
    //- Define scales
    var padding = 20;
    
    var cxMax = d3.max(factorData.clusters, function(d) { return Number(d.cx); });
    var fxMax = d3.max(factorData.factors, function(d) { return Number(d.x2); });
    var xMax = Math.max(cxMax, fxMax);
    var cxMin = d3.min(factorData.clusters, function(d) { return Number(d.cx); });
    var fxMin = d3.min(factorData.factors, function(d) { return Number(d.x2); });
    var xMin = Math.min(cxMin, fxMin);        
    var xScale = d3.scale.linear()
      .domain([xMin - padding, xMax + padding])
      .range([0, w]);
    
    var cyMax = d3.max(factorData.clusters, function(d) { return Number(d.cy); });
    var fyMax = d3.max(factorData.factors, function(d) { return Number(d.y2); });
    var yMax = Math.max(cyMax, fyMax) + 100;
    var cyMin = d3.min(factorData.clusters, function(d) { return Number(d.cy); });    
    var fyMin = d3.min(factorData.factors, function(d) { return Number(d.y2); });    
    var yMin = Math.min(cyMin, fyMin);    
    var yScale = d3.scale.linear()
      .domain([yMin - padding, yMax + padding])
      .range([0, h]);
      
    //- Draw Factor Arrows
    var factorArrows = svg.selectAll('line')
      .data(factorData.factors)
      .enter()
      .append('line')      
      .attr({
        x1: function(d) { return xScale(d.x1) },
        y1: function(d) { return yScale(d.y1) },
        x2: function(d) { return xScale(d.x1) },
        y2: function(d) { return yScale(d.y1) },
        stroke: 'black',
        'stroke-width': 2,
        'marker-end': 'url(#triangle)'
      })      
      .transition()
      .duration(750)
      .attr({
        x2: function(d) { return xScale(d.x2) },
        y2: function(d) { return yScale(d.y2) }
      });
    
    //- Draw Clusters
    var clusterCircles = svg.selectAll('circle')
      .data(factorData.clusters)
      .enter()      
      .append('circle')      
      .attr({
        class: 'clusterCircle',
        id: function(d) { return d.id; },
        cx: function(d) { return xScale(d.cx); },
        cy: function(d) { return yScale(d.cy); },
        r: 0
      })
      .on('mouseover', function(d) {
        var _this = d3.select(this)        
        var xPosition = parseFloat(_this.attr('cx')) + d.r;
        var yPosition = parseFloat(_this.attr('cy')) - d.r;
        //- Update tooltip position and value
        d3.select('#tooltip')
          .style('left', xPosition + 'px')
          .style('top', yPosition + 'px')
          .select('#value')
          .text('x = ' + xPosition + ' y = ' + yPosition);
        //- Show the tooltip
        d3.select('#tooltip').classed('hidden', false);
      })
      .on('mouseout', function() {
        //- Hide the tooltip
        d3.select('#tooltip').classed('hidden', true);
      })
      .on("click", function(d) { console.log(d) })
      //- .on("mouseover", function() { d3.select(this).attr('fill', '#ffd02f'); })
      //- .on('mouseout', function() { d3.select(this).attr('fill', '#222'); })
      .transition()
      .delay(250)
      .duration(1000)      
      .attr('r', function(d) { return d.r; });
    
    //- Draw Cluster Labels
    var clusterText = svg.selectAll('text')
      .data(factorData.clusters)
      .enter()      
      .append('text') 
      .text(function(d) { return d.label })      
      .transition()      
      .delay(500)
      .attr({
        x: function(d) { return xScale(d.cx) },
        y: function(d) { return yScale(d.cy - d.r - 10) },
        'text-anchor' : 'middle',        
      });
      
      //- Axis
      var formatPercent = d3.format(".1%");
      
      var xAxis = d3.svg.axis()
        .scale(xScale)
        .orient('top')
        .ticks(10)
        .tickFormat(formatPercent);      
        
      svg.append("g")
        .attr("class", "axis")
        .attr("transform", "translate(0," + h + ")")
        .call(xAxis);
        
      var yAxis = d3.svg.axis()
        .scale(yScale)
        .orient("right")
        .ticks(10);
        
      svg.append("g")
        .attr("class", "axis")
        .attr("transform", "translate(0,0)")
        .call(yAxis);
        
  //- End d3.json function
  });
